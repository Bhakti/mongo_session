Mongo DB Notes

MongoDB is a free and open-source cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with schemas. MongoDB is developed by MongoDB Inc., and is published under a combination of the GNU Affero General Public License and the Apache License.


What is MongoDB
MongoDB is a document database with the scalability and flexibility that you want with the querying and indexing that you need

MongoDB stores data in flexible, JSON-like documents, meaning fields can vary from document to document and data structure can be changed over time

The document model maps to the objects in your application code, making data easy to work with

Ad hoc queries, indexing, and real time aggregation provide powerful ways to access and analyze your data

MongoDB is a distributed database at its core, so high availability, horizontal scaling, and geographic distribution are built in and easy to use

MongoDB is free and open-source, published under the GNU Affero General Public License


> It is a Document Database
> JSON is saved in MongoDB
> Requires Minimal Joins

What is mongo db
it is a document database
we use json / java script object notation

development team can design data model as per data needed


SQL databases are primarily called as Relational Databases (RDBMS); 
whereas NoSQL database are primarily called as non-relational or distributed database.

SQL databases are table based databases 
whereas NoSQL databases are document based, key-value pairs, graph databases or wide-column stores.

SQL databases have predefined schema 
whereas NoSQL databases have dynamic schema for unstructured data.

SQL databases are vertically scalable 
whereas the NoSQL databases are horizontally scalable. 

SQL databases are scaled by increasing the horse-power of the hardware. 
NoSQL databases are scaled by increasing the databases servers in the pool of resources to reduce the load.

SQL databases uses SQL ( structured query language ) for defining and manipulating the data, which is very powerful. 
In NoSQL database, queries are focused on collection of documents. Sometimes it is also called as UnQL (Unstructured Query Language). The syntax of using UnQL varies from database to database.

SQL database examples: MySql, Oracle, Sqlite, Postgres and MS-SQL. 
NoSQL database examples: MongoDB, BigTable, Redis, RavenDb, Cassandra, Hbase, Neo4j and CouchDb

For complex queries: SQL databases are good fit for the complex query intensive environment 
whereas NoSQL databases are not good fit for complex queries. 
On a high-level, NoSQL don’t have standard interfaces to perform complex queries, and the queries themselves in NoSQL are not as powerful as SQL query language.

For the type of data to be stored: SQL databases are not best fit for hierarchical data storage. 
But, NoSQL database fits better for the hierarchical data storage as it follows the key-value pair way of storing data similar to JSON data. 
NoSQL database are highly preferred for large data set (i.e for big data).

For scalability: In most typical situations, SQL databases are vertically scalable. You can manage increasing load by increasing the CPU, RAM, SSD, etc, on a single server. 
On the other hand, NoSQL databases are horizontally scalable. You can just add few more servers easily in your NoSQL database infrastructure to handle the large traffic.

For high transactional based application: SQL databases are best fit for heavy duty transactional type applications, as it is more stable and promises the atomicity as well as integrity of the data. 
While you can use NoSQL for transactions purpose, it is still not comparable and sable enough in high load and for complex transactional applications.

For support: Excellent support are available for all SQL database from their vendors. There are also lot of independent consultations who can help you with SQL database for a very large scale deployments. 
For some NoSQL database you still have to rely on community support, and only limited outside experts are available for you to setup and deploy your large scale NoSQL deployments.

For properties: SQL databases emphasizes on ACID properties ( Atomicity, Consistency, Isolation and Durability) 
whereas the NoSQL database follows the Brewers CAP theorem ( Consistency, Availability and Partition tolerance )


NoSQL encompasses a wide variety of different database technologies that were developed in response to the demands presented in building modern applications:

Developers are working with applications that create massive volumes of new, rapidly changing data types — structured, semi-structured, unstructured and polymorphic data.

Long gone is the twelve-to-eighteen month waterfall development cycle. Now small teams work in agile sprints, iterating quickly and pushing code every week or two, some even multiple times every day.

Applications that once served a finite audience are now delivered as services that must be always-on, accessible from many different devices and scaled globally to millions of users.

Organizations are now turning to scale-out architectures using open source software, commodity servers and cloud computing instead of large monolithic servers and storage infrastructure.

Relational databases were not designed to cope with the scale and agility challenges that face modern applications, nor were they built to take advantage of the commodity storage and processing power available today.


Factors Driving Modern Applications
Mobile
	2 Billion smartphones in 2015
	Mobile now>50% internet use
	26 billion IOT devices yby 2020
	
Social
 72% of internet use is social media
 2 billion active users monthly
 93% of business use social media
 
Data
	90% data created in last 2 years
	80% enterprise data is unstructured
	unstructured data is growing 2X rate of structured data

Cloud
	Compute Costs decling 
	Storage cost decling
	network cost decling

 
 
 https://www.mongodb.com/nosql-explained
 
 Key Features
High Performance
	MongoDB provides high performance data persistence. In particular,
	Support for embedded data models reduces I/O activity on database system.
	Indexes support faster queries and can include keys from embedded documents and arrays.

	Rich Query Language
	MongoDB supports a rich query language to support read and write operations (CRUD) as well as:

Data Aggregation
	Text Search and Geospatial Queries.
	
High Availability
	MongoDB’s replication facility, called replica set, provides:
	automatic failover and
	data redundancy.
A replica set is a group of MongoDB servers that maintain the same data set, providing redundancy and increasing data availability.

Horizontal Scalability
	MongoDB provides horizontal scalability as part of its core functionality:

	Sharding distributes data across a cluster of machines.
	Starting in 3.4, MongoDB supports creating zones of data based on the shard key. In a balanced cluster, MongoDB directs reads and writes covered by a zone only to those shards inside the zone. See the Zones manual page for more information.

Support for Multiple Storage Engines

MongoDB supports multiple storage engines:
	WiredTiger Storage Engine (including support for Encryption at Rest)
	In-Memory Storage Engine
	MMAPv1 Storage Engine
In addition, MongoDB provides pluggable storage engine API that allows third parties to develop storage engines for MongoDB.


